<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
		
 	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <property name="unauthorizedUrl" value="/logout"/>
	    <property name="successUrl" value="/"/>
	    <property name="loginUrl" value="/"/>
	    <!-- override these for application-specific URLs if you like:
	    <property name="loginUrl" value="/login.jsp"/>
	    <property name="successUrl" value="/home.jsp"/>
	    <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	    <!-- <property name="filters">
	        <util:map>
	            <entry key="anAlias" value-ref="someFilter"/>
	        </util:map>
	    </property> -->
	    <property name="filterChainDefinitions">
	        <value>
	            /resources/**=anon
	            /admin/** = authc, roles[superadmin,admin]
	            /page/** = authc, roles[superadmin]
	            /global/** = authc, roles[superadmin]
	            /widget/** = authc, roles[superadmin]
	            /layout/** = authc, roles[superadmin]
	            /** = anon
	        </value>
	    </property>
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	   <property name="realms">
	    	<list>
	    		<ref bean="superAdminRealm"/>
	    		<ref bean="jpaRealm"/>
	    	</list>
	    </property>
	    <!-- By default the servlet container sessions will be used.  Uncomment this line
	         to use shiro's native sessions (see the JavaDoc for more): -->
	    <!-- <property name="sessionMode" value="native"/> -->
	    <property name="cacheManager" ref="shiroCacheManager"/>
	</bean>
	
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<!-- <bean id="myRealm" class="com.slyak.core.auth.SimpleRealm">
		<property name="userService" ref="userService"/>
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="SHA-256"/>
				<property name="hashIterations" value="1024"/>
				<property name="storedCredentialsHexEncoded" value="false"/>
			</bean>
		</property>
		<property name="cacheManager" ref="shiroCacheManager"/>
		<property name="cachingEnabled" value="true"/>
	</bean> -->
	
	
	<bean id="superAdminRealm" class="org.apache.shiro.realm.text.PropertiesRealm"/>
	
	<bean id="jpaRealm" class="com.slyak.core.web.JpaAuthorizingRealm">
		<property name="cacheManager" ref="shiroCacheManager"/>
		<property name="cachingEnabled" value="true"/>
		<property name="entityClass" value="com.slyak.user.model.User"/>
		<property name="usernameField" value="email"/>
		<property name="passwordField" value="password"/>
		<property name="credentialsMatcher" ref="credentialsMatcher"/>
	</bean>
	
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="SHA-256"/>
		<property name="hashIterations" value="1024"/>
		<!-- Base64 encoding (less text): -->
		<property name="storedCredentialsHexEncoded" value="false"/>
	</bean>

	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>
	
	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>	 -->
</beans>
